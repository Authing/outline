version: 2
jobs:
  build:
    working_directory: ~/outline/outline
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      SECRET_KEY: F0E5AD933D7F6FD8F4DBB3E038C501C052DC0593C686D21ACB30AE205D2F634B
      NODE_ENV: test
      PATH: ${PATH}:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      DATABASE_URL_TEST: postgres://ubuntu@localhost:5432/circle_test
      SMTP_FROM_EMAIL: hello@example.com
      URL: http://localhost:3000
      AWS_S3_UPLOAD_BUCKET_URL: https://s3.amazonaws.com
      DATABASE_URL: postgres://ubuntu@localhost:5432/circle_test
      AWS_S3_UPLOAD_BUCKET_NAME: outline-circle
    docker:
      - image: circleci/node:7.10
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run:
        working_directory: ~/outline/outline
        command: nvm install 8.11 && nvm alias default 8.11
    - run:
        working_directory: ~/outline/outline
        command: 'sudo redis-cli ping >/dev/null 2>&1 || sudo service redis-server
          start; '
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    - run: yarn install --pure-lockfile
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        - ~/.cache/yarn
        - ./node_modules
    # Test
    - run: sequelize db:migrate --url postgres://ubuntu@localhost:5432/circle_test
    - run: yarn test
    - run: yarn lint
    # Teardown
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
